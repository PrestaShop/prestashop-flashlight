name: Pull Request
on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  lint_shell:
    name: "Lint: shell"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

  lint_dockerfile:
    name: "Lint: dockerfile"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          recursive: true
          dockerfile: "*.Dockerfile"

  docker_dry_build:
    name: "Docker build dry-run "
    runs-on: ubuntu-latest
    needs: [lint_shell, lint_dockerfile]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get the latest PrestaShop version
        id: get_latest_ps_version
        run: echo "PS_VERSION=$(curl -s -S -f -L -G $API | jq -r '.tag_name')" >> $GITHUB_OUTPUT
        env:
          API: https://api.github.com/repos/prestashop/prestashop/releases/latest

      - name: Should give the "latest" tag for the latest version available
        run: ./build.sh | grep "prestashop/prestashop-flashlight:latest"
        env:
          DRY_RUN: 1
          PS_VERSION: ${{ steps.get_latest_ps_version.outputs.PS_VERSION }}

      - name: Should not give the "latest" tag to 8.1.2
        run: ./build.sh | grep -v "prestashop/prestashop-flashlight:latest"
        env:
          DRY_RUN: 1
          PS_VERSION: 8.1.2

      - name: Should not give the "latest" tag if PHP version is not recommended
        run: ./build.sh | grep -v "prestashop/prestashop-flashlight:latest"
        env:
          DRY_RUN: 1
          PS_VERSION: ${{ steps.get_latest_ps_version.outputs.PS_VERSION }}
          PHP_VERSION: 7.2

  docker_build:
    name: "Docker build: ${{ matrix.os_flavour }} for alpine"
    runs-on: ubuntu-latest
    needs: [docker_dry_build]
    strategy:
      fail-fast: true
      matrix:
        ps_version: ["1.6.1.24", "1.7.6.9", "1.7.7.8", "1.7.8.11", "8.1.3"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call the docker build chain
        run: ./build.sh
        env:
          PS_VERSION: ${{ matrix.ps_version }}

      - name: Test the image with a dry run
        run: docker run --env PS_DOMAIN='localhost:80' --env DRY_RUN='true' $DOCKER_IMAGE
        env:
          DOCKER_IMAGE: prestashop/prestashop-flashlight:${{ matrix.ps_version }}

      - name: Test the image tooling(composer)
        run: docker run --env PS_DOMAIN='localhost:80' --entrypoint composer $DOCKER_IMAGE --version
        env:
          DOCKER_IMAGE: prestashop/prestashop-flashlight:${{ matrix.ps_version }}

      - name: Test the image tooling(phpunit)
        run: docker run --env PS_DOMAIN='localhost:80' --entrypoint phpunit $DOCKER_IMAGE --version
        env:
          DOCKER_IMAGE: prestashop/prestashop-flashlight:${{ matrix.ps_version }}

      - name: Test the image tooling(phpstan)
        run: docker run --env PS_DOMAIN='localhost:80' --entrypoint phpstan $DOCKER_IMAGE --version
        env:
          DOCKER_IMAGE: prestashop/prestashop-flashlight:${{ matrix.ps_version }}

  docker_build_debian:
    name: "Docker build: 8.1.2 for debian"
    runs-on: ubuntu-latest
    needs: [docker_dry_build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call the docker build chain
        run: ./build.sh
        env:
          OS_FLAVOUR: "debian"
          PS_VERSION: "8.1.2"

  docker_build_cross_compile:
    name: "Docker build x-compile for aarch64"
    runs-on: ubuntu-latest
    needs: docker_build_debian
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: "linux/amd64,linux/arm64"
          use: true

      - name: Test the docker build chain while cross compiling to aarch64
        run: ./build.sh
        env:
          TARGET_PLATFORM: "linux/arm64"
